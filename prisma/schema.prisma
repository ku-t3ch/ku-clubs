// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model User {
    id             String    @id @default(cuid())
    name           String?
    email          String?   @unique
    emailVerified  DateTime?
    image          String?
    accounts       Account[]
    like           Club?     @relation("ClubLikes", fields: [likeId], references: [id])
    likeId         String?
    myClubs        Club[]    @relation("OwnerRelation")
    editor         Club[]    @relation("ClubEditors")
    isAdmin        Boolean   @default(false)
    president      Club?     @relation("ClubPresident")
    vice_president Club?     @relation("ClubVicePresident")
    secretary      Club?     @relation("ClubSecretaryary")
    treasurer      Club?     @relation("ClubTreasurer")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Campus {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String   @unique
    clubs     Club[]
}

model Club {
    id               String     @id @default(cuid())
    createdAt        DateTime   @default(now())
    updatedAt        DateTime   @updatedAt
    name             String     @unique
    detail           String
    campus           Campus     @relation(fields: [campusId], references: [id])
    campusId         String
    type             ClubType[]
    likes            User[]     @relation("ClubLikes")
    views            Int        @default(0)
    owner            User       @relation("OwnerRelation", fields: [ownerId], references: [id])
    editor           User[]     @relation("ClubEditors")
    president        User?      @relation("ClubPresident", fields: [presidentId], references: [id])
    vice_president   User?      @relation("ClubVicePresident", fields: [vice_presidentId], references: [id])
    secretary        User?      @relation("ClubSecretaryary", fields: [secretaryId], references: [id])
    treasurer        User?      @relation("ClubTreasurer", fields: [treasurerId], references: [id])
    treasurerId      String?    @unique
    secretaryId      String?    @unique
    vice_presidentId String?    @unique
    presidentId      String?    @unique
    ownerId          String
    logo             String
    events           Event[]
    posts            Post[]
    isPublic         Boolean    @default(true)
    approved         Boolean    @default(false)
    showOnIndex      Boolean    @default(true)
}

model ClubType {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String   @unique
    clubs     Club[]
}

model Event {
    id     String   @id @default(cuid())
    name   String
    detail String
    cover  String?
    start  DateTime
    end    DateTime
    club   Club     @relation(fields: [clubId], references: [id])
    clubId String
}

model Post {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    title     String
    detail    String
    club      Club     @relation(fields: [clubId], references: [id])
    clubId    String
    views     Int      @default(0)
}
